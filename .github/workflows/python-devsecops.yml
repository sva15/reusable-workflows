name: Python DevSecOps Pipeline

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        type: string
        default: '3.12'
      coverage-threshold:
        description: 'Minimum code coverage percentage required'
        required: false
        type: string
        default: '90'
      requirements-file:
        description: 'Path to requirements.txt file'
        required: false
        type: string
        default: 'requirements.txt'
      source-directory:
        description: 'Source code directory for coverage analysis'
        required: false
        type: string
        default: 'src'
      test-directory:
        description: 'Test directory path'
        required: false
        type: string
        default: 'tests'
      enable-sonarqube:
        description: 'Enable SonarQube analysis'
        required: false
        type: boolean
        default: false
      enable-pr-comments:
        description: 'Enable PR comments with results'
        required: false
        type: boolean
        default: true
    secrets:
      SONAR_TOKEN:
        description: 'SonarQube token for code analysis'
        required: false
    outputs:
      test-status:
        description: 'Overall test execution status'
        value: ${{ jobs.testing.outputs.test-status }}
      coverage-percentage:
        description: 'Code coverage percentage achieved'
        value: ${{ jobs.testing.outputs.coverage-percentage }}
      code-quality-status:
        description: 'Code quality checks status'
        value: ${{ jobs.code-quality.result }}
      security-status:
        description: 'Security scans status'
        value: ${{ jobs.security-scans.result }}

env:
  PYTHON_VERSION: ${{ inputs.python-version }}
  COVERAGE_THRESHOLD: ${{ inputs.coverage-threshold }}

# Concurrency control for reusable workflow
concurrency:
  group: python-devsecops-${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  code-quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    outputs:
      ruff-lint-status: ${{ steps.ruff-lint.outcome }}
      ruff-format-status: ${{ steps.ruff-format.outcome }}
      typing-status: ${{ steps.typing.outcome }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f ${{ inputs.requirements-file }} ]; then pip install -r ${{ inputs.requirements-file }}; fi
        pip install ruff mypy

    - name: Lint with Ruff
      id: ruff-lint
      continue-on-error: true
      run: |
        echo "::group::Ruff Linting & Import Sorting"
        ruff check --output-format=github --target-version=py311 .
        echo "::endgroup::"

    - name: Check Formatting with Ruff
      id: ruff-format
      continue-on-error: true
      run: |
        echo "::group::Ruff Code Formatting Check"
        ruff format --check --target-version=py311 .
        echo "::endgroup::"

    - name: Type Checking
      id: typing
      continue-on-error: true
      run: |
        echo "::group::MyPy Type Checking"
        mypy . --ignore-missing-imports
        echo "::endgroup::"

    - name: Code Quality Summary
      if: always()
      run: |
        echo "Code Quality Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "============================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Ruff Linting | ${{ steps.ruff-lint.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Ruff Formatting | ${{ steps.ruff-format.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| MyPy Type Analysis | ${{ steps.typing.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  testing:
    name: Testing & Coverage
    runs-on: ubuntu-latest
    permissions: 
      checks: write  # This is needed for test-reporter
      contents: read
    outputs:
      coverage-percentage: ${{ steps.coverage-summary.outputs.percentage }}
      test-status: ${{ steps.run-tests.outcome }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f ${{ inputs.requirements-file }} ]; then pip install -r ${{ inputs.requirements-file }}; fi
        pip install pytest pytest-cov coverage

    - name: Test with pytest
      id: run-tests
      run: |
        echo "::group::Running Tests with Coverage"
        mkdir -p junit
        python -m pytest ${{ inputs.test-directory }}/ --doctest-modules --junitxml=junit/test-results.xml --cov=${{ inputs.source-directory }} --cov-report=xml --cov-report=html -v
        echo "::endgroup::"

    - name: Test Results Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Unit Testing results
        path: junit/test-results.xml
        reporter: java-junit
        fail-on-error: false

    - name: Coverage Analysis
      id: coverage-summary
      if: always()
      run: |
        # Extract coverage percentage using coverage CLI
        TOTAL_COVERAGE=$(coverage report --format=total 2>/dev/null || echo "0.0")
        
        echo "percentage=$TOTAL_COVERAGE" >> $GITHUB_OUTPUT
        
        # Check coverage threshold
        if awk "BEGIN {exit !($TOTAL_COVERAGE < ${{ env.COVERAGE_THRESHOLD }})}"; then
          echo "Error: Coverage ${TOTAL_COVERAGE}% is below required ${{ env.COVERAGE_THRESHOLD }}% threshold"
          exit 1
        else
          echo "Coverage ${TOTAL_COVERAGE}% meets required threshold"
        fi

    - name: Upload Coverage Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          junit/test-results.xml
        retention-days: 7

    - name: Testing Summary
      if: always()
      run: |
        TEST_STATUS="${{ steps.run-tests.outcome }}"
        COVERAGE="${{ steps.coverage-summary.outputs.percentage }}"
        
        echo "Testing Results" >> $GITHUB_STEP_SUMMARY
        echo "===============" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Test Execution | $([[ '$TEST_STATUS' == 'success' ]] && echo 'PASSED' || echo 'FAILED') |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Coverage | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
        if awk "BEGIN {exit !($COVERAGE >= ${{ env.COVERAGE_THRESHOLD }})}"; then
          COVERAGE_CHECK="PASSED"
        else
          COVERAGE_CHECK="FAILED"
        fi
        echo "| Coverage Threshold | ${COVERAGE_CHECK} (â‰¥${{ env.COVERAGE_THRESHOLD }}%) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  security-scans:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # For SARIF upload
      actions: read
      contents: read
    outputs:
      pip-audit-status: ${{ steps.deps-scan.outcome }}
      sast-scan-status: ${{ steps.sast-scan.outcome }}
      secret-scan-status: ${{ steps.secret-scan.outcome }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Security Tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-audit bandit

    - name: Dependency Security Scan
      continue-on-error: true
      id: deps-scan
      uses: pypa/gh-action-pip-audit@v1.1.0
      with:
        inputs: ${{ inputs.requirements-file }}

    - name: SAST Security Scan
      id: sast-scan
      continue-on-error: true
      uses: PyCQA/bandit-action@v1
      with:
        targets: .
        exclude: tests,__pycache__
        severity: all
        confidence: all

    - name: Secret Scanning
      id: secret-scan
      continue-on-error: true
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Security Analysis Summary
      if: always()
      run: |
        echo "Security Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "========================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Audit | ${{ steps.deps-scan.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SAST Analysis | ${{ steps.sast-scan.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Secret Detection | ${{ steps.secret-scan.outcome == 'success' && 'PASSED' || 'FAILED' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Detailed security findings are available in the GitHub Security tab via SARIF uploads." >> $GITHUB_STEP_SUMMARY

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: inputs.enable-sonarqube == true
    needs: [testing]
    continue-on-error: true
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Coverage Reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: SonarQube Analysis
      uses: SonarSource/sonarqube-scan-action@v5.3.1
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-comment:
    name: PR Comment with Results
    runs-on: ubuntu-latest
    if: |
      inputs.enable-pr-comments == true &&
      github.event_name == 'pull_request' &&
      always()
    needs: [code-quality, testing, security-scans]
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - name: Comment PR with Results
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          Python DevSecOps Pipeline Results
          ===================================

          Test Coverage
          -------------
          | Metric | Value |
          |--------|-------|
          | Coverage Percentage | **${{ needs.testing.outputs.coverage-percentage }}%** |
          | Coverage Status | ${{ needs.testing.outputs.test-status == 'success' && 'PASSED' || 'FAILED' }} |

          Code Quality Analysis
          --------------------
          | Check | Status |
          |-------|--------|
          | Ruff Linting | ${{ needs.code-quality.outputs.ruff-lint-status == 'success' && 'PASSED' || 'FAILED' }} |
          | Ruff Formatting | ${{ needs.code-quality.outputs.ruff-format-status == 'success' && 'PASSED' || 'FAILED' }} |
          | Type Checking | ${{ needs.code-quality.outputs.typing-status == 'success' && 'PASSED' || 'FAILED' }} |

          Security Analysis
          -----------------
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Audit | ${{ needs.security-scans.outputs.pip-audit-status == 'success' && 'PASSED' || 'FAILED' }} |
          | SAST Analysis | ${{ needs.security-scans.outputs.sast-scan-status == 'success' && 'PASSED' || 'FAILED' }} |
          | Secret Detection | ${{ needs.security-scans.outputs.secret-scan-status == 'success' && 'PASSED' || 'FAILED' }} |

          Build Details: [View Full Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          > **Note:** Detailed security findings are available in the [GitHub Step Summary](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) of the Security Analysis job.

          ---
          Pipeline executed for commit: ${{ github.event.pull_request.head.sha }}
